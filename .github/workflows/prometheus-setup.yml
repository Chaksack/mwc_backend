name: Prometheus and AlertManager Setup

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: mwc-cluster
  PROMETHEUS_SERVICE: mwc-prometheus-service
  ALERTMANAGER_SERVICE: mwc-alertmanager-service

jobs:
  deploy-prometheus:
    name: Deploy Prometheus and AlertManager
    runs-on: ubuntu-latest

    # Set environment based on trigger
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Prometheus config
        run: |
          mkdir -p prometheus-config
          cat > prometheus-config/prometheus.yml <<EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          alerting:
            alertmanagers:
              - static_configs:
                  - targets: ['alertmanager:9093']

          rule_files:
            - "alert_rules.yml"

          scrape_configs:
            - job_name: 'mwc-backend'
              metrics_path: '/metrics/prometheus'
              static_configs:
                - targets: ['mwc-backend:8080']
          EOF

      - name: Create AlertManager config
        run: |
          mkdir -p alertmanager-config
          cat > alertmanager-config/alertmanager.yml <<EOF
          global:
            slack_api_url: '${{ secrets.SLACK_WEBHOOK }}'
            resolve_timeout: 5m

          route:
            group_by: ['alertname', 'job']
            group_wait: 30s
            group_interval: 5m
            repeat_interval: 4h
            receiver: 'slack-notifications'

          receivers:
            - name: 'slack-notifications'
              slack_configs:
                - channel: '#alerts'
                  send_resolved: true
                  title: '{{ .Status | toUpper }} {{ .CommonLabels.alertname }}'
                  text: >-
                    {{ range .Alerts }}
                      *Alert:* {{ .Annotations.summary }}
                      *Description:* {{ .Annotations.description }}
                      *Severity:* {{ .Labels.severity }}
                      *Started:* {{ .StartsAt }}
                    {{ end }}
          EOF

      - name: Create Alert Rules
        run: |
          cat > prometheus-config/alert_rules.yml <<EOF
          groups:
            - name: mwc-backend
              rules:
                - alert: HighMemoryUsage
                  expr: process_resident_memory_bytes / 1024 / 1024 > 500
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: High memory usage detected
                    description: "Memory usage is above 500MB for 5 minutes"

                - alert: HighCPUUsage
                  expr: rate(process_cpu_seconds_total[5m]) * 100 > 80
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: High CPU usage detected
                    description: "CPU usage is above 80% for 5 minutes"

                - alert: HighHTTPErrorRate
                  expr: sum(rate(http_requests_total{status=~"5.."}[5m])) / sum(rate(http_requests_total[5m])) * 100 > 5
                  for: 5m
                  labels:
                    severity: critical
                  annotations:
                    summary: High HTTP error rate detected
                    description: "HTTP error rate is above 5% for 5 minutes"

                - alert: HighDBQueryTime
                  expr: avg_query_time_seconds > 1
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: High database query time detected
                    description: "Average database query time is above 1 second for 5 minutes"
          EOF

      - name: Create Prometheus ECS Task Definition
        run: |
          cat > prometheus-task-definition.json <<EOF
          {
            "family": "mwc-prometheus",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "prometheus",
                "image": "prom/prometheus:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 9090,
                    "hostPort": 9090,
                    "protocol": "tcp"
                  }
                ],
                "mountPoints": [
                  {
                    "sourceVolume": "prometheus-config",
                    "containerPath": "/etc/prometheus",
                    "readOnly": false
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/mwc-prometheus",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "volumes": [
              {
                "name": "prometheus-config",
                "host": {
                  "sourcePath": "/ecs/prometheus-config"
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024"
          }
          EOF

      - name: Create AlertManager ECS Task Definition
        run: |
          cat > alertmanager-task-definition.json <<EOF
          {
            "family": "mwc-alertmanager",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "alertmanager",
                "image": "prom/alertmanager:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 9093,
                    "hostPort": 9093,
                    "protocol": "tcp"
                  }
                ],
                "mountPoints": [
                  {
                    "sourceVolume": "alertmanager-config",
                    "containerPath": "/etc/alertmanager",
                    "readOnly": false
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/mwc-alertmanager",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "volumes": [
              {
                "name": "alertmanager-config",
                "host": {
                  "sourcePath": "/ecs/alertmanager-config"
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF

      - name: Register Prometheus Task Definition
        id: register-prometheus-task
        run: |
          TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://prometheus-task-definition.json)
          REVISION=$(echo $TASK_DEF | jq -r '.taskDefinition.revision')
          echo "revision=$REVISION" >> $GITHUB_OUTPUT

      - name: Register AlertManager Task Definition
        id: register-alertmanager-task
        run: |
          TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://alertmanager-task-definition.json)
          REVISION=$(echo $TASK_DEF | jq -r '.taskDefinition.revision')
          echo "revision=$REVISION" >> $GITHUB_OUTPUT

      - name: Deploy Prometheus to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.PROMETHEUS_SERVICE }} \
            --task-definition mwc-prometheus:${{ steps.register-prometheus-task.outputs.revision }} \
            --force-new-deployment

      - name: Deploy AlertManager to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ALERTMANAGER_SERVICE }} \
            --task-definition mwc-alertmanager:${{ steps.register-alertmanager-task.outputs.revision }} \
            --force-new-deployment

      - name: Wait for services stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.PROMETHEUS_SERVICE }} ${{ env.ALERTMANAGER_SERVICE }}

      - name: Send Slack notification - Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: monitoring
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: |
            ✅ Successfully deployed Prometheus and AlertManager to ECS in ${{ env.ENVIRONMENT }} environment
            *Cluster:* ${{ env.ECS_CLUSTER }}
            *Services:* 
            - ${{ env.PROMETHEUS_SERVICE }}
            - ${{ env.ALERTMANAGER_SERVICE }}
          SLACK_TITLE: Monitoring Setup Success
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send Slack notification - Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: monitoring
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: |
            ❌ Failed to deploy Prometheus and AlertManager to ECS in ${{ env.ENVIRONMENT }} environment
            *Repository:* ${{ github.repository }}
            *Workflow:* ${{ github.workflow }}
            *Check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details*
          SLACK_TITLE: Monitoring Setup Failure
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
